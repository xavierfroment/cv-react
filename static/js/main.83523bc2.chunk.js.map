{"version":3,"sources":["components/Loader/Loader.js","components/ScrollTop/ScrollTop.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","ScrollTop","useState","showScroll","setShowScroll","window","addEventListener","pageYOffset","fill","onClick","scrollTo","top","behavior","style","height","display","Routes","lazy","App","fallback","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSA6BeA,G,MA1BA,WACb,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,0BACb,sDACA,6BACA,yBAAKA,UAAU,cACb,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,oC,sBCYGC,G,MAzBG,WAAO,IAAD,EAEcC,oBAAS,GAFvB,mBAEfC,EAFe,KAEHC,EAFG,KAWtBC,OAAOC,iBAAiB,UAPD,YAChBH,GAAcE,OAAOE,YAAc,IACtCH,GAAc,GACLD,GAAcE,OAAOE,aAAe,KAC7CH,GAAc,MAUlB,OACE,6BACE,kBAAC,IAAD,CAAiBI,KAAK,QAAQR,UAAU,WAAWS,QAPvC,WACdJ,OAAOK,SAAS,CAACC,IAAK,EAAGC,SAAU,YAMqCC,MAAO,CAACC,OAAQ,GAAIC,QAASZ,EAAa,OAAS,aCpBzHa,EAASC,gBAAK,kBAAM,sDAaXC,E,uKATX,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,EAAD,MACA,kBAACH,EAAD,W,GALUI,aCKEC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83523bc2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-page\">\r\n      <div className=\"loader-content\">\r\n        <div className=\"text-center text-light\">\r\n          <h3>Chargement en cours...</h3>\r\n          <br/>\r\n          <div className=\"lds-roller\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useState } from 'react';\r\nimport {FaArrowCircleUp} from 'react-icons/fa';\r\nimport './ScrollTop.css'\r\n\r\n\r\nconst ScrollTop = () => {\r\n\r\n  const [showScroll, setShowScroll] = useState(false)\r\n\r\n  const checkScrollTop = () => {\r\n    if (!showScroll && window.pageYOffset > 400) {\r\n      setShowScroll(true)\r\n    } else if (showScroll && window.pageYOffset <= 400) {\r\n      setShowScroll(false)\r\n    }\r\n  }\r\n  window.addEventListener('scroll', checkScrollTop)\r\n    \r\n  const scrollUp =() => {\r\n    window.scrollTo({top: 0, behavior: 'smooth'});\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <FaArrowCircleUp fill=\"white\" className=\"scrollUp\" onClick={scrollUp} style={{height: 40, display: showScroll ? 'flex' : 'none'}}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScrollTop;\r\n","import React, { Component, lazy, Suspense } from 'react';\nimport Loader from './components/Loader/Loader';\nimport './App.css';\nimport ScrollTop from './components/ScrollTop/ScrollTop';\n\nconst Routes = lazy(() => import(\"./components/Routes\"));\n\nclass App extends Component {\n  render() {\n    return (\n      <Suspense fallback={<Loader/>}>\n        <ScrollTop/>\n        <Routes />\n      </Suspense>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,document.getElementById('root')\n  \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}